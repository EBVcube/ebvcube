% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ebv_add_data.R
\name{ebv_add_data}
\alias{ebv_add_data}
\title{Add data to a self-created EBV netCDF}
\usage{
ebv_add_data(
  filepath_nc,
  filepath_tif,
  datacubepath,
  entity = NULL,
  timestep = 1,
  band = 1,
  ignore_RAM = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{filepath_nc}{Character. Path to the self-created netCDF file.}

\item{filepath_tif}{Character. Path to the GeoTiff file containing the data.}

\item{datacubepath}{Character. Path to the datacube (use
\code{\link[=ebv_datacubepaths]{ebv_datacubepaths()}}).}

\item{entity}{Character or Integer. Default is NULL. (As if the structure
were 3D. Then no entity argument is needed.) Character string or single
integer value indicating the entity of the 4D structure of the EBV netCDFs.}

\item{timestep}{Integer. Default: 1. Define to which timestep or timesteps
the data should be added. If several timesteps are given they have to be in
a continuous order. Meaning c(4,5,6) is right but c(2,5,6) is wrong.}

\item{band}{Integer. Default: 1. Define which band(s) to read from GeoTiff.
Can be several. Don't have to be in order as the timesteps definition
requires.}

\item{ignore_RAM}{Logical. Default: FALSE. Checks if there is enough space in
your memory to read the data. Can be switched off (set to TRUE).}

\item{verbose}{Logical. Default: FALSE. Turn on all warnings by setting it to
TRUE.}
}
\value{
Adds data to the EBV netCDF. Check your results using
\code{\link[=ebv_read]{ebv_read()}} and/or \code{\link[=ebv_analyse]{ebv_analyse()}}.
}
\description{
Add data to the self-created EBV netCDF from GeoTiffs.
}
\note{
If the data exceeds your memory the RAM check will throw an error. No
block-processing or other method implemented so far. Move to a machine with
more capacities for the moment if needed.
}
\examples{
file <- system.file(file.path("extdata","cSAR_new.nc"), package="ebvnetcdf")
tif <- system.file(file.path("extdata","cSAR_write_ts234.tif"), package="ebvnetcdf")
# datacubes <- ebv_datacubepaths(file)
ts <- c(2:4)
band <- c(1:3)
#ebv_add_data(file, tif, datacubepaths[1,1], ts, band)
}
